// Task 1
// Следующая функция возвращает true, если параметр age больше 18.
// В ином случае она запрашивает подтверждение через confirm и возвращает его результат:

function checkAge(age) {
  if (age > 18) {
    return true;
  } else {
    // ...
    return confirm('Родители разрешили?');
  }
}
// Будет ли эта функция работать как-то иначе, если убрать else?

function checkAge(age) {
  if (age > 18) {
    return true;
  }
  // ...
  return confirm('Родители разрешили?');
}
// Есть ли хоть одно отличие в поведении этого варианта?

// Отличий в работе этих двух функций - нет

// End Task 1

// Task 2
// Следующая функция возвращает true, если параметр age больше 18.
// В ином случае она задаёт вопрос confirm и возвращает его результат.

function checkAge(age) {
  if (age > 18) {
    return true;
  } else {
    return confirm('Родители разрешили?');
  }
}
// Перепишите функцию, чтобы она делала то же самое, но без if, в одну строку.
// Сделайте два варианта функции checkAge:

// Используя оператор ?
// Используя оператор ||

function checkAge(age){
  return (age > 18) ? true : confirm("Родители разрешили?");
}

function checkAge(age){
  return (age > 18) || confirm("Родители разрешили?")
}

// End Task 2

// Task 3
// Напишите функцию min(a,b), которая возвращает меньшее из чисел a и b.

function min(n1, n2){
  return n1 < n2 ? n1 : n2
}

// Пример вызовов:
// min(2, 5) == 2
// min(3, -1) == -1
// min(1, 1) == 1

// End Task 3

// Task 4
// Напишите функцию pow(x,n), которая возводит x в степень n и возвращает результат.
// pow(3, 2) = 3 * 3 = 9
// pow(3, 3) = 3 * 3 * 3 = 27
// pow(1, 100) = 1 * 1 * ...* 1 = 1

function pow(x, n){
  return (n % 1 == 0) ? x ** n : console.log("Поддерживаются только натуральные значения n")
}

console.log(pow(3, 2))
console.log(pow(3, 3))
console.log(pow(1, 100))

// Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n)
// P.S. В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.

// End Task 4